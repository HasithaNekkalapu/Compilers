
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.pcat;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PcatParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PcatParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PcatParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PcatParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\006\000\002\003" +
    "\006\000\002\044\004\000\002\044\002\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\017\003\000" +
    "\002\021\004\000\002\021\002\000\002\020\006\000\002" +
    "\020\010\000\002\024\003\000\002\045\005\000\002\045" +
    "\003\000\002\025\006\000\002\022\003\000\002\046\005" +
    "\000\002\046\003\000\002\023\007\000\002\023\011\000" +
    "\002\027\003\000\002\026\005\000\002\026\005\000\002" +
    "\031\004\000\002\031\002\000\002\030\006\000\002\032" +
    "\005\000\002\032\004\000\002\034\005\000\002\034\003" +
    "\000\002\047\005\000\002\047\003\000\002\033\005\000" +
    "\002\006\006\000\002\006\005\000\002\006\007\000\002" +
    "\006\005\000\002\006\011\000\002\006\013\000\002\006" +
    "\010\000\002\006\006\000\002\006\014\000\002\006\016" +
    "\000\002\006\004\000\002\006\005\000\002\006\004\000" +
    "\002\007\004\000\002\007\002\000\002\035\007\000\002" +
    "\035\002\000\002\013\005\000\002\013\004\000\002\015" +
    "\005\000\002\015\003\000\002\014\003\000\002\014\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\005" +
    "\005\000\002\005\003\000\002\012\005\000\002\012\003" +
    "\000\002\011\003\000\002\011\006\000\002\011\005\000" +
    "\002\036\005\000\002\036\004\000\002\037\007\000\002" +
    "\043\007\000\002\043\003\000\002\040\004\000\002\040" +
    "\005\000\002\042\005\000\002\042\003\000\002\041\003" +
    "\000\002\041\005\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\033\005\001\002\000\004\002\344\001" +
    "\002\000\004\024\006\001\002\000\012\012\ufffd\032\ufffd" +
    "\041\ufffd\042\ufffd\001\002\000\004\061\343\001\002\000" +
    "\012\012\013\032\012\041\015\042\011\001\002\000\014" +
    "\004\ufff7\012\ufff7\032\ufff7\041\ufff7\042\ufff7\001\002\000" +
    "\004\004\273\001\002\000\026\004\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\025\uffd0\034\uffd0\036\uffd0\043\uffd0\044" +
    "\uffd0\001\002\000\012\012\ufffe\032\ufffe\041\ufffe\042\ufffe" +
    "\001\002\000\004\004\016\001\002\000\004\024\024\001" +
    "\002\000\014\010\022\012\ufff4\032\ufff4\041\ufff4\042\ufff4" +
    "\001\002\000\014\010\ufff2\012\ufff2\032\ufff2\041\ufff2\042" +
    "\ufff2\001\002\000\012\012\ufffb\032\ufffb\041\ufffb\042\ufffb" +
    "\001\002\000\004\004\016\001\002\000\014\010\ufff3\012" +
    "\ufff3\032\ufff3\041\ufff3\042\ufff3\001\002\000\006\011\027" +
    "\035\025\001\002\000\006\004\uffe7\020\uffe7\001\002\000" +
    "\004\061\033\001\002\000\004\030\030\001\002\000\004" +
    "\004\031\001\002\000\012\024\uffeb\045\uffeb\061\uffeb\065" +
    "\uffeb\001\002\000\004\061\uffea\001\002\000\014\010\ufff1" +
    "\012\ufff1\032\ufff1\041\ufff1\042\ufff1\001\002\000\006\004" +
    "\035\020\037\001\002\000\004\060\040\001\002\000\006" +
    "\004\uffe8\020\uffe8\001\002\000\004\061\uffe9\001\002\000" +
    "\004\004\031\001\002\000\004\061\042\001\002\000\006" +
    "\004\uffe6\020\uffe6\001\002\000\026\004\052\020\056\021" +
    "\045\022\047\023\051\025\050\034\044\036\055\043\046" +
    "\044\054\001\002\000\004\064\263\001\002\000\004\061" +
    "\262\001\002\000\016\004\070\006\074\007\065\027\071" +
    "\047\064\064\072\001\002\000\004\004\236\001\002\000" +
    "\026\004\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0" +
    "\034\uffd0\036\uffd0\043\uffd0\044\uffd0\001\002\000\016\004" +
    "\070\006\074\007\065\027\071\047\064\064\072\001\002" +
    "\000\012\045\uffad\063\uffad\064\140\066\uffad\001\002\000" +
    "\032\004\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\025\uffd1\034\uffd1\036\uffd1\043\uffd1\044\uffd1\001" +
    "\002\000\004\064\201\001\002\000\020\004\070\006\074" +
    "\007\065\027\071\047\064\061\175\064\072\001\002\000" +
    "\004\061\uffff\001\002\000\010\045\061\063\062\066\060" +
    "\001\002\000\016\004\070\006\074\007\065\027\071\047" +
    "\064\064\072\001\002\000\016\004\070\006\074\007\065" +
    "\027\071\047\064\064\072\001\002\000\004\004\063\001" +
    "\002\000\070\010\uffab\013\uffab\014\uffab\015\uffab\026\uffab" +
    "\030\uffab\031\uffab\037\uffab\040\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\061\uffab\062\uffab\063\uffab\065\uffab\066" +
    "\uffab\067\uffab\071\uffab\001\002\000\016\004\070\006\074" +
    "\007\065\027\071\047\064\064\072\001\002\000\062\010" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\026\uff9e\030\uff9e\031\uff9e" +
    "\037\uff9e\040\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\061\uff9e" +
    "\062\uff9e\065\uff9e\067\uff9e\071\uff9e\001\002\000\062\010" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\026\uffc7\030\uffc7\031\uffc7" +
    "\037\uffc7\040\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\061\uffc7" +
    "\062\uffc7\065\uffc7\067\uffc7\071\uffc7\001\002\000\040\010" +
    "\077\014\105\026\101\031\113\046\103\047\076\050\110" +
    "\051\100\052\111\053\114\054\106\055\112\056\104\057" +
    "\102\061\171\001\002\000\072\010\uffad\013\uffad\014\uffad" +
    "\015\uffad\026\uffad\030\uffad\031\uffad\037\uffad\040\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\140\065\uffad\066\uffad\067\uffad\070\134\071\uffad\001\002" +
    "\000\016\004\070\006\074\007\065\027\071\047\064\064" +
    "\072\001\002\000\016\004\070\006\074\007\065\027\071" +
    "\047\064\064\072\001\002\000\066\010\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\026\uffc6\030\uffc6\031\uffc6\037\uffc6\040\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\061\uffc6\062\uffc6\063\062" +
    "\065\uffc6\066\060\067\uffc6\071\uffc6\001\002\000\062\010" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\026\uff9f\030\uff9f\031\uff9f" +
    "\037\uff9f\040\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f" +
    "\062\uff9f\065\uff9f\067\uff9f\071\uff9f\001\002\000\040\010" +
    "\077\014\105\026\101\031\113\046\103\047\076\050\110" +
    "\051\100\052\111\053\114\054\106\055\112\056\104\057" +
    "\102\065\107\001\002\000\016\004\070\006\074\007\065" +
    "\027\071\047\064\064\072\001\002\000\016\004\070\006" +
    "\074\007\065\027\071\047\064\064\072\001\002\000\016" +
    "\004\070\006\074\007\065\027\071\047\064\064\072\001" +
    "\002\000\016\004\070\006\074\007\065\027\071\047\064" +
    "\064\072\001\002\000\016\004\070\006\074\007\065\027" +
    "\071\047\064\064\072\001\002\000\016\004\070\006\074" +
    "\007\065\027\071\047\064\064\072\001\002\000\016\004" +
    "\070\006\074\007\065\027\071\047\064\064\072\001\002" +
    "\000\016\004\070\006\074\007\065\027\071\047\064\064" +
    "\072\001\002\000\016\004\070\006\074\007\065\027\071" +
    "\047\064\064\072\001\002\000\062\010\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\026\uffc5\030\uffc5\031\uffc5\037\uffc5\040\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\061\uffc5\062\uffc5\065\uffc5" +
    "\067\uffc5\071\uffc5\001\002\000\016\004\070\006\074\007" +
    "\065\027\071\047\064\064\072\001\002\000\016\004\070" +
    "\006\074\007\065\027\071\047\064\064\072\001\002\000" +
    "\016\004\070\006\074\007\065\027\071\047\064\064\072" +
    "\001\002\000\016\004\070\006\074\007\065\027\071\047" +
    "\064\064\072\001\002\000\016\004\070\006\074\007\065" +
    "\027\071\047\064\064\072\001\002\000\062\010\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\026\uffb6\030\uffb6\031\uffb6\037\uffb6" +
    "\040\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\061\uffb6\062\uffb6" +
    "\065\uffb6\067\uffb6\071\uffb6\001\002\000\062\010\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\026\uffbc\030\uffbc\031\uffbc\037\uffbc" +
    "\040\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffbc\062\uffbc" +
    "\065\uffbc\067\uffbc\071\uffbc\001\002\000\062\010\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\026\uffb7\030\uffb7\031\uffb7\037\uffb7" +
    "\040\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\061\uffb7\062\uffb7" +
    "\065\uffb7\067\uffb7\071\uffb7\001\002\000\062\010\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\026\uffb9\030\uffb9\031\uffb9\037\uffb9" +
    "\040\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9" +
    "\065\uffb9\067\uffb9\071\uffb9\001\002\000\062\010\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\026\uffc0\030\uffc0\031\uffc0\037\uffc0" +
    "\040\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffc0\062\uffc0" +
    "\065\uffc0\067\uffc0\071\uffc0\001\002\000\062\010\uffba\013" +
    "\uffba\014\uffba\015\uffba\026\uffba\030\uffba\031\uffba\037\uffba" +
    "\040\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\061\uffba\062\uffba" +
    "\065\uffba\067\uffba\071\uffba\001\002\000\062\010\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\026\uffbe\030\uffbe\031\uffbe\037\uffbe" +
    "\040\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffbe\062\uffbe" +
    "\065\uffbe\067\uffbe\071\uffbe\001\002\000\062\010\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\026\uffb8\030\uffb8\031\uffb8\037\uffb8" +
    "\040\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8" +
    "\065\uffb8\067\uffb8\071\uffb8\001\002\000\062\010\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\026\uffc2\030\uffc2\031\uffc2\037\uffc2" +
    "\040\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffc2\062\uffc2" +
    "\065\uffc2\067\uffc2\071\uffc2\001\002\000\062\010\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\026\uffb5\030\uffb5\031\uffb5\037\uffb5" +
    "\040\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\061\uffb5\062\uffb5" +
    "\065\uffb5\067\uffb5\071\uffb5\001\002\000\062\010\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\026\uffbd\030\uffbd\031\uffbd\037\uffbd" +
    "\040\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffbd\062\uffbd" +
    "\065\uffbd\067\uffbd\071\uffbd\001\002\000\062\010\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\026\uffbf\030\uffbf\031\uffbf\037\uffbf" +
    "\040\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffbf\062\uffbf" +
    "\065\uffbf\067\uffbf\071\uffbf\001\002\000\062\010\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\026\uffbb\030\uffbb\031\uffbb\037\uffbb" +
    "\040\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffbb\062\uffbb" +
    "\065\uffbb\067\uffbb\071\uffbb\001\002\000\062\010\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\026\uffc1\030\uffc1\031\uffc1\037\uffc1" +
    "\040\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffc1\062\uffc1" +
    "\065\uffc1\067\uffc1\071\uffc1\001\002\000\062\010\077\013" +
    "\uffc3\014\105\015\uffc3\026\101\030\uffc3\031\113\037\uffc3" +
    "\040\uffc3\046\103\047\076\050\110\051\100\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffc3\062\uffc3" +
    "\065\uffc3\067\uffc3\071\uffc3\001\002\000\020\004\153\006" +
    "\074\007\065\027\071\047\064\064\072\071\151\001\002" +
    "\000\062\010\uffb2\013\uffb2\014\uffb2\015\uffb2\026\uffb2\030" +
    "\uffb2\031\uffb2\037\uffb2\040\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\061\uffb2\062\uffb2\065\uffb2\067\uffb2\071\uffb2\001\002" +
    "\000\062\010\uffb4\013\uffb4\014\uffb4\015\uffb4\026\uffb4\030" +
    "\uffb4\031\uffb4\037\uffb4\040\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\061\uffb4\062\uffb4\065\uffb4\067\uffb4\071\uffb4\001\002" +
    "\000\062\010\uffb3\013\uffb3\014\uffb3\015\uffb3\026\uffb3\030" +
    "\uffb3\031\uffb3\037\uffb3\040\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\061\uffb3\062\uffb3\065\uffb3\067\uffb3\071\uffb3\001\002" +
    "\000\020\004\070\006\074\007\065\027\071\047\064\064" +
    "\072\065\142\001\002\000\042\010\077\014\105\026\101" +
    "\031\113\046\103\047\076\050\110\051\100\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\062\uffb0\065\uffb0" +
    "\001\002\000\062\010\uffa9\013\uffa9\014\uffa9\015\uffa9\026" +
    "\uffa9\030\uffa9\031\uffa9\037\uffa9\040\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\061\uffa9\062\uffa9\065\uffa9\067\uffa9\071\uffa9" +
    "\001\002\000\006\062\144\065\145\001\002\000\016\004" +
    "\070\006\074\007\065\027\071\047\064\064\072\001\002" +
    "\000\062\010\uffaa\013\uffaa\014\uffaa\015\uffaa\026\uffaa\030" +
    "\uffaa\031\uffaa\037\uffaa\040\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\061\uffaa\062\uffaa\065\uffaa\067\uffaa\071\uffaa\001\002" +
    "\000\042\010\077\014\105\026\101\031\113\046\103\047" +
    "\076\050\110\051\100\052\111\053\114\054\106\055\112" +
    "\056\104\057\102\062\uffb1\065\uffb1\001\002\000\006\062" +
    "\167\071\166\001\002\000\006\062\uffa2\071\uffa2\001\002" +
    "\000\062\010\uffa5\013\uffa5\014\uffa5\015\uffa5\026\uffa5\030" +
    "\uffa5\031\uffa5\037\uffa5\040\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\061\uffa5\062\uffa5\065\uffa5\067\uffa5\071\uffa5\001\002" +
    "\000\044\010\077\014\105\026\101\030\164\031\113\046" +
    "\103\047\076\050\110\051\100\052\111\053\114\054\106" +
    "\055\112\056\104\057\102\062\uffa1\071\uffa1\001\002\000" +
    "\056\010\uffad\014\uffad\026\uffad\030\uffad\031\uffad\045\154" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\062\uffad\063\uffad\064\140" +
    "\066\uffad\070\134\071\uffad\001\002\000\016\004\070\006" +
    "\074\007\065\027\071\047\064\064\072\001\002\000\042" +
    "\010\077\014\105\026\101\031\113\046\103\047\076\050" +
    "\110\051\100\052\111\053\114\054\106\055\112\056\104" +
    "\057\102\061\uffa6\071\uffa6\001\002\000\006\061\160\071" +
    "\157\001\002\000\062\010\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\026\uffa8\030\uffa8\031\uffa8\037\uffa8\040\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\061\uffa8\062\uffa8\065\uffa8\067\uffa8\071" +
    "\uffa8\001\002\000\004\004\161\001\002\000\004\045\162" +
    "\001\002\000\016\004\070\006\074\007\065\027\071\047" +
    "\064\064\072\001\002\000\042\010\077\014\105\026\101" +
    "\031\113\046\103\047\076\050\110\051\100\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\uffa7\071\uffa7" +
    "\001\002\000\016\004\070\006\074\007\065\027\071\047" +
    "\064\064\072\001\002\000\042\010\077\014\105\026\101" +
    "\031\113\046\103\047\076\050\110\051\100\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\062\uffa0\071\uffa0" +
    "\001\002\000\062\010\uffa4\013\uffa4\014\uffa4\015\uffa4\026" +
    "\uffa4\030\uffa4\031\uffa4\037\uffa4\040\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\061\uffa4\062\uffa4\065\uffa4\067\uffa4\071\uffa4" +
    "\001\002\000\016\004\070\006\074\007\065\027\071\047" +
    "\064\064\072\001\002\000\006\062\uffa3\071\uffa3\001\002" +
    "\000\032\004\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\025\uffde\034\uffde\036\uffde\043\uffde\044\uffde" +
    "\001\002\000\062\010\uffc4\013\uffc4\014\uffc4\015\uffc4\026" +
    "\uffc4\030\uffc4\031\uffc4\037\uffc4\040\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\111\053\114\054\106\055\112\056" +
    "\104\057\102\061\uffc4\062\uffc4\065\uffc4\067\uffc4\071\uffc4" +
    "\001\002\000\040\010\077\014\105\026\101\031\113\046" +
    "\103\047\076\050\110\051\100\052\111\053\114\054\106" +
    "\055\112\056\104\057\102\067\174\001\002\000\070\010" +
    "\uffac\013\uffac\014\uffac\015\uffac\026\uffac\030\uffac\031\uffac" +
    "\037\uffac\040\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\061\uffac\062\uffac\063\uffac\065\uffac\066\uffac\067\uffac\071" +
    "\uffac\001\002\000\032\004\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\025\uffd2\034\uffd2\036\uffd2\043" +
    "\uffd2\044\uffd2\001\002\000\040\010\077\014\105\026\101" +
    "\031\113\046\103\047\076\050\110\051\100\052\111\053" +
    "\114\054\106\055\112\056\104\057\102\061\177\001\002" +
    "\000\032\004\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\025\uffd3\034\uffd3\036\uffd3\043\uffd3\044\uffd3" +
    "\001\002\000\004\061\212\001\002\000\022\004\070\005" +
    "\202\006\074\007\065\027\071\047\064\064\072\065\205" +
    "\001\002\000\006\062\uffc9\065\uffc9\001\002\000\042\010" +
    "\077\014\105\026\101\031\113\046\103\047\076\050\110" +
    "\051\100\052\111\053\114\054\106\055\112\056\104\057" +
    "\102\062\uffc8\065\uffc8\001\002\000\006\062\207\065\210" +
    "\001\002\000\004\061\uffcc\001\002\000\006\062\uffca\065" +
    "\uffca\001\002\000\020\004\070\005\202\006\074\007\065" +
    "\027\071\047\064\064\072\001\002\000\004\061\uffcd\001" +
    "\002\000\006\062\uffcb\065\uffcb\001\002\000\032\004\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025" +
    "\uffdb\034\uffdb\036\uffdb\043\uffdb\044\uffdb\001\002\000\004" +
    "\061\214\001\002\000\032\004\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\034\uffdd\036\uffdd" +
    "\043\uffdd\044\uffdd\001\002\000\040\010\077\014\105\026" +
    "\101\031\113\037\216\046\103\047\076\050\110\051\100" +
    "\052\111\053\114\054\106\055\112\056\104\057\102\001" +
    "\002\000\032\004\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\025\uffd0\034\uffd0\036\uffd0\043\uffd0\044" +
    "\uffd0\001\002\000\032\004\052\016\uffce\017\uffce\020\uffce" +
    "\021\045\022\047\023\051\025\050\034\044\036\055\043" +
    "\046\044\054\001\002\000\010\016\221\017\222\020\223" +
    "\001\002\000\026\004\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\025\uffd0\034\uffd0\036\uffd0\043\uffd0\044\uffd0\001\002" +
    "\000\016\004\070\006\074\007\065\027\071\047\064\064" +
    "\072\001\002\000\004\061\224\001\002\000\032\004\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\025" +
    "\uffda\034\uffda\036\uffda\043\uffda\044\uffda\001\002\000\040" +
    "\010\077\014\105\026\101\031\113\037\226\046\103\047" +
    "\076\050\110\051\100\052\111\053\114\054\106\055\112" +
    "\056\104\057\102\001\002\000\032\004\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\034\uffd0" +
    "\036\uffd0\043\uffd0\044\uffd0\001\002\000\032\004\052\016" +
    "\uffcf\017\uffcf\020\uffcf\021\045\022\047\023\051\025\050" +
    "\034\044\036\055\043\046\044\054\001\002\000\026\004" +
    "\052\020\231\021\045\022\047\023\051\025\050\034\044" +
    "\036\055\043\046\044\054\001\002\000\004\061\232\001" +
    "\002\000\032\004\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\025\uffd9\034\uffd9\036\uffd9\043\uffd9\044" +
    "\uffd9\001\002\000\026\004\052\020\234\021\045\022\047" +
    "\023\051\025\050\034\044\036\055\043\046\044\054\001" +
    "\002\000\004\061\235\001\002\000\032\004\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7\034" +
    "\uffd7\036\uffd7\043\uffd7\044\uffd7\001\002\000\004\045\237" +
    "\001\002\000\016\004\070\006\074\007\065\027\071\047" +
    "\064\064\072\001\002\000\040\010\077\014\105\026\101" +
    "\031\113\040\241\046\103\047\076\050\110\051\100\052" +
    "\111\053\114\054\106\055\112\056\104\057\102\001\002" +
    "\000\016\004\070\006\074\007\065\027\071\047\064\064" +
    "\072\001\002\000\042\010\077\013\243\014\105\015\244" +
    "\026\101\031\113\046\103\047\076\050\110\051\100\052" +
    "\111\053\114\054\106\055\112\056\104\057\102\001\002" +
    "\000\016\004\070\006\074\007\065\027\071\047\064\064" +
    "\072\001\002\000\026\004\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\025\uffd0\034\uffd0\036\uffd0\043\uffd0\044\uffd0\001" +
    "\002\000\026\004\052\020\246\021\045\022\047\023\051" +
    "\025\050\034\044\036\055\043\046\044\054\001\002\000" +
    "\004\061\247\001\002\000\032\004\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\034\uffd6\036" +
    "\uffd6\043\uffd6\044\uffd6\001\002\000\040\010\077\014\105" +
    "\015\251\026\101\031\113\046\103\047\076\050\110\051" +
    "\100\052\111\053\114\054\106\055\112\056\104\057\102" +
    "\001\002\000\026\004\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\025\uffd0\034\uffd0\036\uffd0\043\uffd0\044\uffd0\001\002" +
    "\000\026\004\052\020\253\021\045\022\047\023\051\025" +
    "\050\034\044\036\055\043\046\044\054\001\002\000\004" +
    "\061\254\001\002\000\032\004\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\034\uffd5\036\uffd5" +
    "\043\uffd5\044\uffd5\001\002\000\040\010\077\014\105\015" +
    "\256\026\101\031\113\046\103\047\076\050\110\051\100" +
    "\052\111\053\114\054\106\055\112\056\104\057\102\001" +
    "\002\000\026\004\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\025\uffd0\034\uffd0\036\uffd0\043\uffd0\044\uffd0\001\002\000" +
    "\026\004\052\020\260\021\045\022\047\023\051\025\050" +
    "\034\044\036\055\043\046\044\054\001\002\000\004\061" +
    "\261\001\002\000\032\004\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\025\uffd8\034\uffd8\036\uffd8\043" +
    "\uffd8\044\uffd8\001\002\000\032\004\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\034\uffd4\036" +
    "\uffd4\043\uffd4\044\uffd4\001\002\000\004\004\264\001\002" +
    "\000\012\062\uffad\063\uffad\065\uffad\066\uffad\001\002\000" +
    "\012\062\271\063\062\065\uffae\066\060\001\002\000\004" +
    "\065\267\001\002\000\004\061\270\001\002\000\032\004" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\025\uffdc\034\uffdc\036\uffdc\043\uffdc\044\uffdc\001\002\000" +
    "\004\004\264\001\002\000\010\063\062\065\uffaf\066\060" +
    "\001\002\000\004\064\302\001\002\000\014\010\277\012" +
    "\ufff0\032\ufff0\041\ufff0\042\ufff0\001\002\000\014\010\uffee" +
    "\012\uffee\032\uffee\041\uffee\042\uffee\001\002\000\012\012" +
    "\ufffa\032\ufffa\041\ufffa\042\ufffa\001\002\000\004\004\273" +
    "\001\002\000\014\010\uffef\012\uffef\032\uffef\041\uffef\042" +
    "\uffef\001\002\000\006\024\320\060\317\001\002\000\006" +
    "\004\303\065\304\001\002\000\010\045\uffe2\060\uffe2\062" +
    "\uffe2\001\002\000\006\024\uffe4\060\uffe4\001\002\000\006" +
    "\061\315\065\uffe0\001\002\000\006\060\312\062\311\001" +
    "\002\000\004\065\310\001\002\000\006\024\uffe5\060\uffe5" +
    "\001\002\000\004\004\314\001\002\000\004\004\031\001" +
    "\002\000\006\061\uffdf\065\uffdf\001\002\000\010\045\uffe3" +
    "\060\uffe3\062\uffe3\001\002\000\004\004\303\001\002\000" +
    "\004\065\uffe1\001\002\000\004\004\031\001\002\000\012" +
    "\012\ufffd\032\ufffd\041\ufffd\042\ufffd\001\002\000\004\061" +
    "\322\001\002\000\014\010\uffed\012\uffed\032\uffed\041\uffed" +
    "\042\uffed\001\002\000\004\024\324\001\002\000\012\012" +
    "\ufffd\032\ufffd\041\ufffd\042\ufffd\001\002\000\004\061\326" +
    "\001\002\000\014\010\uffec\012\uffec\032\uffec\041\uffec\042" +
    "\uffec\001\002\000\012\012\ufffc\032\ufffc\041\ufffc\042\ufffc" +
    "\001\002\000\014\004\303\012\ufff9\032\ufff9\041\ufff9\042" +
    "\ufff9\001\002\000\010\045\334\060\333\062\311\001\002" +
    "\000\014\004\ufff8\012\ufff8\032\ufff8\041\ufff8\042\ufff8\001" +
    "\002\000\004\004\031\001\002\000\016\004\070\006\074" +
    "\007\065\027\071\047\064\064\072\001\002\000\040\010" +
    "\077\014\105\026\101\031\113\046\103\047\076\050\110" +
    "\051\100\052\111\053\114\054\106\055\112\056\104\057" +
    "\102\061\336\001\002\000\014\004\ufff6\012\ufff6\032\ufff6" +
    "\041\ufff6\042\ufff6\001\002\000\004\045\340\001\002\000" +
    "\016\004\070\006\074\007\065\027\071\047\064\064\072" +
    "\001\002\000\040\010\077\014\105\026\101\031\113\046" +
    "\103\047\076\050\110\051\100\052\111\053\114\054\106" +
    "\055\112\056\104\057\102\061\342\001\002\000\014\004" +
    "\ufff5\012\ufff5\032\ufff5\041\ufff5\042\ufff5\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\006\044\007\001\001\000\002" +
    "\001\001\000\004\016\013\001\001\000\006\017\326\021" +
    "\327\001\001\000\010\022\275\023\274\046\273\001\001" +
    "\000\004\007\042\001\001\000\002\001\001\000\010\024" +
    "\020\025\017\045\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\022\001\001\000\002\001\001\000\004\026\025\001\001" +
    "\000\004\031\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\052\011\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\254\010\065\011\072\001\001\000" +
    "\002\001\001\000\004\007\232\001\001\000\010\004\214" +
    "\010\065\011\072\001\001\000\004\036\212\001\001\000" +
    "\002\001\001\000\004\013\177\001\001\000\010\004\175" +
    "\010\065\011\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\172\010\065\011\072\001\001\000\010" +
    "\004\066\010\065\011\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\171\010\065\011\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\135\037\136\040\134\001\001\000\010\004\132" +
    "\010\065\011\072\001\001\000\010\004\074\010\065\011" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\131\010\065\011\072\001\001\000" +
    "\010\004\130\010\065\011\072\001\001\000\010\004\127" +
    "\010\065\011\072\001\001\000\010\004\126\010\065\011" +
    "\072\001\001\000\010\004\125\010\065\011\072\001\001" +
    "\000\010\004\124\010\065\011\072\001\001\000\010\004" +
    "\123\010\065\011\072\001\001\000\010\004\122\010\065" +
    "\011\072\001\001\000\010\004\121\010\065\011\072\001" +
    "\001\000\002\001\001\000\010\004\120\010\065\011\072" +
    "\001\001\000\010\004\117\010\065\011\072\001\001\000" +
    "\010\004\116\010\065\011\072\001\001\000\010\004\115" +
    "\010\065\011\072\001\001\000\010\004\114\010\065\011" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\151\010\065\011\072\041\147\042\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\140\005\142\010\065\011\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\145" +
    "\010\065\011\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\135\037\136\040\134\001" +
    "\001\000\012\004\154\010\065\011\072\043\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\162\010\065" +
    "\011\072\001\001\000\002\001\001\000\010\004\164\010" +
    "\065\011\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\151\010\065\011\072\041\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\202" +
    "\010\065\011\072\014\205\015\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\202\010\065\011\072\014" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\216\001\001\000\010\006\052\011\056" +
    "\035\217\001\001\000\002\001\001\000\004\007\227\001" +
    "\001\000\010\004\224\010\065\011\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\226\001\001\000\006\006\052\011\056\001\001\000\006" +
    "\006\052\011\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\052\011\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\237\010" +
    "\065\011\072\001\001\000\002\001\001\000\010\004\241" +
    "\010\065\011\072\001\001\000\002\001\001\000\010\004" +
    "\247\010\065\011\072\001\001\000\004\007\244\001\001" +
    "\000\006\006\052\011\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\251\001\001" +
    "\000\006\006\052\011\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\256\001\001" +
    "\000\006\006\052\011\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\264\012\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\271" +
    "\001\001\000\002\001\001\000\004\032\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\304\034\305\047\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\315\034\305\001\001\000\002\001\001\000\004" +
    "\027\322\001\001\000\006\003\320\044\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\324\044\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\331\034\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\336\001" +
    "\001\000\010\004\334\010\065\011\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\340\010\065\011\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PcatParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PcatParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PcatParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.REAL_LITERAL,
      sym.AND, sym.ARRAY, sym.BEGIN, sym.BY, sym.DIV, sym.DO, sym.ELSE, sym.ELSIF, sym.END,
      sym.EXIT, sym.FOR, sym.IF, sym.IS, sym.LOOP, sym.MOD, sym.NOT, sym.OF, sym.OR,
      sym.PROCEDURE, sym.PROGRAM, sym.READ, sym.RECORD, sym.RETURN, sym.THEN, sym.TO,
      sym.TYPE, sym.VAR, sym.WHILE, sym.WRITE, sym.ASGN, sym.PLUS, sym.MINUS, sym.TIMES, sym.SLASH,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI, sym.COMMA, sym.DOT,
      sym.LPAREN, sym.RPAREN, sym.LSQBRA, sym.RSQBRA, sym.LCUBRA, sym.RCUBRA
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL",
      "AND", "ARRAY", "BEGIN", "BY", "DIV", "DO", "ELSE", "ELSIF", "END",
      "EXIT", "FOR", "IF", "IS", "LOOP", "MOD", "NOT", "OF", "OR",
      "PROCEDURE", "PROGRAM", "READ", "RECORD", "RETURN", "THEN", "TO",
      "TYPE", "VAR", "WHILE", "WRITE", "ASGN :=", "PLUS +", "MINUS -", "TIMES *", "SLASH /",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ =", "NEQ <>", "COLON :", "SEMI ;", "COMMA ,", "DOT .",
      "LPAREN (", "RPAREN )", "LSQBRA [", "RSQBRA ]", "LCUBRA "+'{', "RCUBRA "+'}'
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PcatParser$actions {
  private final PcatParser parser;

  /** Constructor */
  CUP$PcatParser$actions(PcatParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action_part00000000(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PcatParser$result;

      /* select the action based on the action number */
      switch (CUP$PcatParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		RESULT = start_val;
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PcatParser$parser.done_parsing();
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IS body SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declaration_list BEGIN statement_list END 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration_list",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration_list",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= VAR var_decls 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= TYPE type_decls 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= PROCEDURE procedure_decls 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decls ::= var_decl_list 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl_list ::= var_decl_list var_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl_list",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl_list ::= 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl_list",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= ID_list ASGN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decl ::= ID_list COLON typename ASGN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_decls ::= type_decl_list 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_decl_list ::= type_decl_list AND type_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl_list",35, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_decl_list ::= type_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl_list",35, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_decl ::= ID IS type SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedure_decls ::= procedure_decl_list 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_decl_list ::= procedure_decl_list AND procedure_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl_list",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_decl_list ::= procedure_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl_list",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_decl ::= ID formal_params IS body SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_decl ::= ID formal_params COLON typename IS body SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typename ::= ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("typename",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= ARRAY OF typename 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= RECORD component_list END 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // component_list ::= component_list component 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component_list",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // component_list ::= 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component_list",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // component ::= ID COLON typename SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_params ::= LPAREN fp_section_list RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formal_params ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ID_list ::= ID_list COMMA ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("ID_list",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ID_list ::= ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("ID_list",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // fp_section_list ::= fp_section SEMI fp_section 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section_list",37, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // fp_section_list ::= fp_section 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section_list",37, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fp_section ::= ID_list COLON typename 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section",25, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= lvalue ASGN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= ID actual_params SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= READ LPAREN lvalue_list RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= WRITE write_params SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= IF expression THEN statement_list else_list END SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= IF expression THEN statement_list else_list ELSE statement_list END SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= WHILE expression DO statement_list END SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= LOOP statement_list END SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= FOR ID ASGN expression TO expression DO statement_list END SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= FOR ID ASGN expression TO expression BY expression DO statement_list END SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-11)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= EXIT SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_list",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_list",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else_list ::= else_list ELSIF expression THEN statement_list 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("else_list",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_list ::= 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("else_list",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write_params ::= LPAREN write_expr_list RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // write_params ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // write_expr_list ::= write_expr_list COMMA write_expr 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr_list",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // write_expr_list ::= write_expr 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr_list",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // write_expr ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // write_expr ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= number 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= lvalue 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression TIMES expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression SLASH expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression MOD expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression GT expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression LT expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression EQ expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression GEQ expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression LEQ expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression NEQ expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= ID actual_params 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= ID record_inits 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= ID array_inits 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression_list ::= expression_list COMMA expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression_list",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_list ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression_list",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lvalue_list ::= lvalue COMMA lvalue 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue_list",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lvalue_list ::= lvalue 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue_list",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lvalue ::= ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lvalue ::= lvalue LSQBRA expression RSQBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lvalue ::= lvalue DOT ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // actual_params ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actual_params ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // record_inits ::= LCUBRA ID ASGN record_init_list RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // record_init_list ::= record_init_list SEMI ID ASGN expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_init_list",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // record_init_list ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_init_list",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // array_inits ::= LCUBRA RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // array_inits ::= LCUBRA array_init_list RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // array_init_list ::= array_init_list COMMA array_init 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init_list",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // array_init_list ::= array_init 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init_list",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // array_init ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // array_init ::= expression OF expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // number ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // number ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PcatParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
              return CUP$PcatParser$do_action_part00000000(
                               CUP$PcatParser$act_num,
                               CUP$PcatParser$parser,
                               CUP$PcatParser$stack,
                               CUP$PcatParser$top);
    }
}

}
